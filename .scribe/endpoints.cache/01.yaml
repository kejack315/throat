## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Word API'
description: |-

  This API is for Word CRUD
endpoints:
  -
    httpMethods:
      - POST
    uri: api/words
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Add a word to the list.'
      description: |-
        This endpoint allows you to add a word to the list.
        It's a really useful endpoint, and you should play around
        with it for a bit.
        <aside class="notice">We mean it; you really should.ðŸ˜•</aside>
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a1Db48efkgVZa656h3PEdvc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/words/{word_id}'
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Get A Word'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      word_id:
        name: word_id
        description: 'The ID of the word.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      word_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1Z3b6eEa6Vd5Dacg8f4hPvk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/words/{word_id}'
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a word'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      word_id:
        name: word_id
        description: 'The ID of the word.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      word_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      word:
        name: word
        description: ''
        required: true
        example: asperiores
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      word: asperiores
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E4k6Zdb16cefD5vVag83Pah'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/words/{word_id}'
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove a word'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      word_id:
        name: word_id
        description: 'The ID of the word.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      word_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer DghdafkE41V8ceZ65abv36P'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/words/{word_id}/complete'
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Complete the word'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      word_id:
        name: word_id
        description: 'The ID of the word.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      word_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1d3v65Ph4b8a6gEDfcVkeaZ'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/words
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all words, 10 per page'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"current_page":1,"data":[{"id":1,"word":"IBM","word_type_id":15,"user_id":1,"created_at":"2023-11-30T13:30:19.000000Z","updated_at":"2023-11-30T13:30:19.000000Z"},{"id":2,"word":"laser","word_type_id":10,"user_id":1,"created_at":"2023-11-30T13:30:19.000000Z","updated_at":"2023-11-30T13:30:19.000000Z"},{"id":3,"word":"MoSCoW","word_type_id":10,"user_id":1,"created_at":"2023-11-30T13:30:19.000000Z","updated_at":"2023-11-30T13:30:19.000000Z"},{"id":4,"word":"THROAT","word_type_id":14,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":5,"word":"CRUD","word_type_id":10,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":6,"word":"KISS","word_type_id":10,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":7,"word":"PHP","word_type_id":16,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":8,"word":"imho","word_type_id":17,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":9,"word":"DRY","word_type_id":10,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"},{"id":10,"word":"inc.","word_type_id":12,"user_id":1,"created_at":"2023-11-30T13:30:20.000000Z","updated_at":"2023-11-30T13:30:20.000000Z"}],"first_page_url":"http:\/\/127.0.0.1:8000\/api\/words?page=1","from":1,"last_page":2,"last_page_url":"http:\/\/127.0.0.1:8000\/api\/words?page=2","links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"http:\/\/127.0.0.1:8000\/api\/words?page=1","label":"1","active":true},{"url":"http:\/\/127.0.0.1:8000\/api\/words?page=2","label":"2","active":false},{"url":"http:\/\/127.0.0.1:8000\/api\/words?page=2","label":"Next &raquo;","active":false}],"next_page_url":"http:\/\/127.0.0.1:8000\/api\/words?page=2","path":"http:\/\/127.0.0.1:8000\/api\/words","per_page":10,"prev_page_url":null,"to":10,"total":17}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '58'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6fV3Da18khacevZP4gd6bE5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/words/search
    metadata:
      groupName: 'Word API'
      groupDescription: |-

        This API is for Word CRUD
      subgroup: ''
      subgroupDescription: ''
      title: 'Search a word by using word.'
      description: |-
        This endpoint allows you to find a word in the list.
        It's a really useful endpoint, and you should play around
        with it for a bit.
        <aside class="notice">We mean it; you really should.ðŸ˜•</aside>
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E8b4Vhfd5va613Zgak6cDPe'
    controller: null
    method: null
    route: null
    custom: []
