openapi: 3.0.3
info:
  title: THROAT
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
paths:
  /api/docs/api:
    get:
      summary: 'Invoke the controller method.'
      operationId: invokeTheControllerMethod
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <title>THROAT - API Docs</title>\n\n    <script src=\"https://unpkg.com/@stoplight/elements/web-components.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/@stoplight/elements/styles.min.css\">\n</head>\n<body style=\"height: 100vh; overflow-y: hidden\">\n<elements-api\n    apiDescriptionUrl=\"http://127.0.0.1:8000/docs/api.json\"\n    router=\"hash\"\n        logo=\"\"\n/>\n</body>\n</html>\n"
      tags:
        - Endpoints
  /api/login:
    post:
      summary: ''
      operationId: postApiLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/register:
    post:
      summary: ''
      operationId: postApiRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: vel
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: jed.johnston@example.org
                password:
                  type: string
                  description: ''
                  example: cupiditate
                confirm_password:
                  type: string
                  description: 'The value and <code>password</code> must match.'
                  example: labore
              required:
                - name
                - email
                - password
                - confirm_password
      security: []
  /api/logout:
    post:
      summary: ''
      operationId: postApiLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
  /api/wordTypes:
    get:
      summary: 'Get all wordtypes'
      operationId: getAllWordtypes
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    post:
      summary: 'Add wordtype'
      operationId: addWordtype
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: magnam
                code:
                  type: string
                  description: ''
                  example: corporis
              required:
                - name
                - code
  '/api/wordTypes/{wordType_id}':
    get:
      summary: 'Get a wordtype'
      operationId: getAWordtype
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    put:
      summary: 'Update the wordtype'
      operationId: updateTheWordtype
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: expedita
                code:
                  type: string
                  description: ''
                  example: alias
              required:
                - name
                - code
    delete:
      summary: 'Remove a wordtype'
      operationId: removeAWordtype
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: wordType_id
        description: 'The ID of the wordType.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/wordTypes/{wordType_id}/complete':
    put:
      summary: 'Complete the wordtype'
      operationId: completeTheWordtype
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: wordType_id
        description: 'The ID of the wordType.'
        example: 1
        required: true
        schema:
          type: integer
  /api/definitionRatings:
    get:
      summary: 'Get all definition_ratings'
      operationId: getAllDefinitionRatings
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    post:
      summary: 'Add a rating to a definition.'
      operationId: addARatingToADefinition
      description: "This endpoint allows you to add a rating to the definition.\nIt's a really useful endpoint, and you should play around\nwith it for a bit.\n<aside class=\"notice\">We mean it; you really should.ðŸ˜•</aside>"
      parameters: []
      responses: {  }
      tags:
        - Endpoints
  '/api/definitionRatings/{definition_id}':
    get:
      summary: 'Get a Definition.'
      operationId: getADefinition
      description: "This endpoint allows you to get a definition.\nIt's a really useful endpoint, and you should play around\nwith it for a bit.\n<aside class=\"notice\">We mean it; you really should.ðŸ˜•</aside>"
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    put:
      summary: 'Update the Rating for a definition'
      operationId: updateTheRatingForADefinition
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 7
              required:
                - stars
    delete:
      summary: 'Remove a definition_rating'
      operationId: removeADefinitionRating
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: definition_id
        description: 'The ID of the definition.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/definitionRatings/{definition}/complete':
    put:
      summary: 'Complete the definition_raating'
      operationId: completeTheDefinitionRaating
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: definition
        description: ''
        example: nobis
        required: true
        schema:
          type: string
  /api/words:
    post:
      summary: 'Add a word to the list.'
      operationId: addAWordToTheList
      description: "This endpoint allows you to add a word to the list.\nIt's a really useful endpoint, and you should play around\nwith it for a bit.\n<aside class=\"notice\">We mean it; you really should.ðŸ˜•</aside>"
      parameters: []
      responses: {  }
      tags:
        - 'Word API'
    get:
      summary: 'Get all words, 10 per page'
      operationId: getAllWords10PerPage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  current_page: 1
                  data:
                    -
                      id: 1
                      word: IBM
                      word_type_id: 15
                      user_id: 1
                      created_at: '2023-11-30T13:30:19.000000Z'
                      updated_at: '2023-11-30T13:30:19.000000Z'
                    -
                      id: 2
                      word: laser
                      word_type_id: 10
                      user_id: 1
                      created_at: '2023-11-30T13:30:19.000000Z'
                      updated_at: '2023-11-30T13:30:19.000000Z'
                    -
                      id: 3
                      word: MoSCoW
                      word_type_id: 10
                      user_id: 1
                      created_at: '2023-11-30T13:30:19.000000Z'
                      updated_at: '2023-11-30T13:30:19.000000Z'
                    -
                      id: 4
                      word: THROAT
                      word_type_id: 14
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 5
                      word: CRUD
                      word_type_id: 10
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 6
                      word: KISS
                      word_type_id: 10
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 7
                      word: PHP
                      word_type_id: 16
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 8
                      word: imho
                      word_type_id: 17
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 9
                      word: DRY
                      word_type_id: 10
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                    -
                      id: 10
                      word: inc.
                      word_type_id: 12
                      user_id: 1
                      created_at: '2023-11-30T13:30:20.000000Z'
                      updated_at: '2023-11-30T13:30:20.000000Z'
                  first_page_url: 'http://127.0.0.1:8000/api/words?page=1'
                  from: 1
                  last_page: 2
                  last_page_url: 'http://127.0.0.1:8000/api/words?page=2'
                  links:
                    -
                      url: null
                      label: '&laquo; Previous'
                      active: false
                    -
                      url: 'http://127.0.0.1:8000/api/words?page=1'
                      label: '1'
                      active: true
                    -
                      url: 'http://127.0.0.1:8000/api/words?page=2'
                      label: '2'
                      active: false
                    -
                      url: 'http://127.0.0.1:8000/api/words?page=2'
                      label: 'Next &raquo;'
                      active: false
                  next_page_url: 'http://127.0.0.1:8000/api/words?page=2'
                  path: 'http://127.0.0.1:8000/api/words'
                  per_page: 10
                  prev_page_url: null
                  to: 10
                  total: 17
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        word: IBM
                        word_type_id: 15
                        user_id: 1
                        created_at: '2023-11-30T13:30:19.000000Z'
                        updated_at: '2023-11-30T13:30:19.000000Z'
                      -
                        id: 2
                        word: laser
                        word_type_id: 10
                        user_id: 1
                        created_at: '2023-11-30T13:30:19.000000Z'
                        updated_at: '2023-11-30T13:30:19.000000Z'
                      -
                        id: 3
                        word: MoSCoW
                        word_type_id: 10
                        user_id: 1
                        created_at: '2023-11-30T13:30:19.000000Z'
                        updated_at: '2023-11-30T13:30:19.000000Z'
                      -
                        id: 4
                        word: THROAT
                        word_type_id: 14
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 5
                        word: CRUD
                        word_type_id: 10
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 6
                        word: KISS
                        word_type_id: 10
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 7
                        word: PHP
                        word_type_id: 16
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 8
                        word: imho
                        word_type_id: 17
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 9
                        word: DRY
                        word_type_id: 10
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                      -
                        id: 10
                        word: inc.
                        word_type_id: 12
                        user_id: 1
                        created_at: '2023-11-30T13:30:20.000000Z'
                        updated_at: '2023-11-30T13:30:20.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        word:
                          type: string
                          example: IBM
                        word_type_id:
                          type: integer
                          example: 15
                        user_id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          example: '2023-11-30T13:30:19.000000Z'
                        updated_at:
                          type: string
                          example: '2023-11-30T13:30:19.000000Z'
                  first_page_url:
                    type: string
                    example: 'http://127.0.0.1:8000/api/words?page=1'
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 2
                  last_page_url:
                    type: string
                    example: 'http://127.0.0.1:8000/api/words?page=2'
                  links:
                    type: array
                    example:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://127.0.0.1:8000/api/words?page=1'
                        label: '1'
                        active: true
                      -
                        url: 'http://127.0.0.1:8000/api/words?page=2'
                        label: '2'
                        active: false
                      -
                        url: 'http://127.0.0.1:8000/api/words?page=2'
                        label: 'Next &raquo;'
                        active: false
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: null
                        label:
                          type: string
                          example: '&laquo; Previous'
                        active:
                          type: boolean
                          example: false
                  next_page_url:
                    type: string
                    example: 'http://127.0.0.1:8000/api/words?page=2'
                  path:
                    type: string
                    example: 'http://127.0.0.1:8000/api/words'
                  per_page:
                    type: integer
                    example: 10
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 17
      tags:
        - 'Word API'
  '/api/words/{word_id}':
    get:
      summary: 'Get A Word'
      operationId: getAWord
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Word API'
    put:
      summary: 'Update a word'
      operationId: updateAWord
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Word API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                  description: ''
                  example: asperiores
              required:
                - word
    delete:
      summary: 'Remove a word'
      operationId: removeAWord
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Word API'
    parameters:
      -
        in: path
        name: word_id
        description: 'The ID of the word.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/words/{word_id}/complete':
    put:
      summary: 'Complete the word'
      operationId: completeTheWord
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Word API'
    parameters:
      -
        in: path
        name: word_id
        description: 'The ID of the word.'
        example: 1
        required: true
        schema:
          type: integer
  /api/words/search:
    post:
      summary: 'Search a word by using word.'
      operationId: searchAWordByUsingWord
      description: "This endpoint allows you to find a word in the list.\nIt's a really useful endpoint, and you should play around\nwith it for a bit.\n<aside class=\"notice\">We mean it; you really should.ðŸ˜•</aside>"
      parameters: []
      responses: {  }
      tags:
        - 'Word API'
tags:
  -
    name: Endpoints
    description: ''
  -
    name: 'Word API'
    description: "\nThis API is for Word CRUD"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
